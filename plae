import boto3
import json
import sys

def read_json(file_path):
    with open(file_path, 'r') as file:
        return json.load(file)

def get_aws_region(args):
    if '--AWSRegion' in args:
        idx = args.index('--AWSRegion')
        if idx + 1 < len(args):
            return args[idx + 1]
    return None

def parse_stack_tags(tags_str):
    return [{'Key': kv.split('=')[0], 'Value': kv.split('=')[1]} for kv in tags_str.split(',')]

def aws_cfn_deploy(region, template_file, stack_name, parameters, tags, role_arn=None):
    client = boto3.client('cloudformation', region_name=region)
    parameters_list = [{'ParameterKey': k, 'ParameterValue': v} for k, v in parameters.items()]
    
    with open(template_file, 'r') as file:
        template_body = file.read()
    
    deploy_args = {
        'StackName': stack_name,
        'TemplateBody': template_body,
        'Parameters': parameters_list,
        'Capabilities': ['CAPABILITY_NAMED_IAM'],
        'Tags': tags
    }
    
    if role_arn:
        deploy_args['RoleARN'] = role_arn

    response = client.create_stack(**deploy_args)
    print(response)

def main():
    args = sys.argv[1:]
    aws_region = get_aws_region(args)

    if not aws_region:
        print("AWS Region not provided. Use --AWSRegion to specify the region.")
        return

    role_arn = input("Please enter if you would like to use RoleArn to Launch stack, No/RoleArn: ")

    # Load parameters from JSON
    params = read_json('parameters.json')

    stack_tags = parse_stack_tags(params['StackTags'])

    # Deploy stack
    aws_cfn_deploy(
        aws_region,
        'template.yaml',  # Make sure your template file name is correct
        params['TopicName'],  # Use TopicName as the stack name
        {
            'EmailAddress': params['EmailAddress'],
            'TopicName': params['TopicName']
        },
        stack_tags,
        None if role_arn == 'No' else role_arn
    )

if __name__ == '__main__':
    main()

Traceback (most recent call last):
  File "/home/ubuntu/environment/test.py", line 66, in <module>
    main()
  File "/home/ubuntu/environment/test.py", line 48, in main
    params = read_json('template_parameter_values.json')
  File "/home/ubuntu/environment/test.py", line 7, in read_json
    return json.load(file)
  File "/usr/lib/python3.10/json/__init__.py", line 293, in load
    return loads(fp.read(),
  File "/usr/lib/python3.10/json/__init__.py", line 346, in loads
    return _default_decoder.decode(s)
  File "/usr/lib/python3.10/json/decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/usr/lib/python3.10/json/decoder.py", line 353, in raw_decode
    obj, end = self.scan_once(s, idx)
json.decoder.JSONDecodeError: Expecting property name enclosed in double quotes: line 2 column 5 (char 6)

json.decoder.JSONDecodeError: Expecting ',' delimiter: line 3 column 6 (char 57)
botocore.exceptions.ClientError: An error occurred (ValidationError) when calling the CreateStack operation: Parameters: [StackTags] must have values


import boto3
import json
import sys

def read_json(file_path):
    with open(file_path, 'r') as file:
        return json.load(file)

def get_aws_region(args):
    if '--AWSRegion' in args:
        idx = args.index('--AWSRegion')
        if idx + 1 < len(args):
            return args[idx + 1]
    return None

def parse_stack_tags(tags_str):
    return [{'Key': kv.split('=')[0], 'Value': kv.split('=')[1]} for kv in tags_str.split(',')]

def aws_cfn_deploy(region, template_file, stack_name, parameters, tags, role_arn=None):
    client = boto3.client('cloudformation', region_name=region)
    parameters_list = [{'ParameterKey': k, 'ParameterValue': v} for k, v in parameters.items()]
    
    with open(template_file, 'r') as file:
        template_body = file.read()
    
    deploy_args = {
        'StackName': stack_name,
        'TemplateBody': template_body,
        'Parameters': parameters_list,
        'Capabilities': ['CAPABILITY_NAMED_IAM'],
        'Tags': tags
    }
    
    if role_arn:
        deploy_args['RoleARN'] = role_arn

    response = client.create_stack(**deploy_args)
    print(response)

def main():
    args = sys.argv[1:]
    aws_region = get_aws_region(args)

    if not aws_region:
        print("AWS Region not provided. Use --AWSRegion to specify the region.")
        return

    role_arn = input("Please enter if you would like to use RoleArn to Launch stack, No/RoleArn: ")

    # Load parameters from JSON
    params = read_json('parameters.json')

    stack_tags = parse_stack_tags(params['StackTags'])

    # Deploy stack
    aws_cfn_deploy(
        aws_region,
        'template.yaml',  # Make sure your template file name is correct
        params['TopicName'],  # Use TopicName as the stack name
        {
            'EmailAddress': params['EmailAddress'],
            'TopicName': params['TopicName']
        },
        stack_tags,
        None if role_arn == 'No' else role_arn
    )

if __name__ == '__main__':
    main()
import os
import boto3
from botocore.config import Config
import urllib3

http = urllib3.PoolManager()
config = Config(signature_version='s3v4')
s3_client = boto3.client('s3', config=config)

def source_bucket_url(source_bucket, object_key):
    response = s3_client.generate_presigned_url(
            'get_object',
            Params={
                "Bucket":source_bucket,
                "Key":object_key
            },
            ExpiresIn=300
        )
    return response

def download_object(source_bucket, object_key):
    file_name = '/tmp/' + object_key
    s3_client.download_file(source_bucket, object_key, file_name)
    with open(file_name, 'rb') as f:
        file = f.read()
    return file_name, file

def destination_bucket_url(destination_bucket, object_key):
    response = s3_client.generate_presigned_post(
            destination_bucket,
            object_key,
            ExpiresIn=300
        )
    return response
    
def upload_object(object_key, url, file):
    r = http.request(
            "PUT",
            url,
            body=file
        )
    return r.status

def lambda_handler(event, context):
    
    source_bucket = "cloudformationartifacts1432"
    destination_bucket = "adityabucket-test"
    object_key = "layout.csv"
    
    destination_url = destination_bucket_url(destination_bucket, object_key)
#    source_url = source_bucket_url(source_bucket, object_key)
    url = destination_bucket_url(destination_bucket, object_key)["url"]
#    data = destination_bucket_url(destination_bucket, object_key)["fields"]
    file_name, file =  download_object(source_bucket, object_key)
    return upload_object(object_key, url, file)
